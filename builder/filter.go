package builder

/**
参数过滤代码

*/
type scopeFilterT struct {
	Scope  int
	Fields []string
}

// 在导出前，收集scope相同的field。然后输出到对应的,和sortMap类似的结构中。
var _scopeFilterT = `
if scope< {{.Scope}} {
{{range $element := .Fields}}
	filter[{{$element}}] = bsonx.Int32(0)
{{end}}
}
`

type filterTemp struct {
	ModelName string
	SortMap   string
}

// SortMap 是按照从大到小的顺序排列
var _filterTemp = `
func {{.ModelName}}Filter(scope int) interface{} {
    filter := bson.M{}
{{range $element := .SortMap}}
	{{$element}}
{{end}}
	return filter
}
`

type filterFileTemp struct {
	PkgName string
	Imps    []string
	Filters []string
}

// Imps主要是引入的model， 这里引入来以下工具
var _filterFileTemp = `
// Code generated by champ tool dtogen. DO NOT EDIT.
/* 
  Package {{.PkgName}} is a generated mc cache package.
  It is generated from:
  ARGS
*/

package {{.PkgName}}

import (
{{range $element := .Imps}}
	{{$element}}
{{end}}
)

{{range $element := .Filters}}
{{$element}}
{{end}}
`

func (builder *Builder) OutFilter(file string) (string, error) {
	f, pkg, err := builder.checkFileExsit(file)

	if err != nil {
		return "", err
	}

	fft := new(filterFileTemp)

	return "", nil
}

func outFieldTemp(name string) (string, error) {
	return "", nil
}

// 收集，分类带有scope的字段，并且排序： 大-》小
func colScopeToMap() {

}
