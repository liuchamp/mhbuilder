package builder

import (
	"github.com/liuchamp/mhbuilder/log"
	"github.com/liuchamp/mhbuilder/utils"
	"path"
	"strings"
)

type headerTemplate struct {
	PkgName       string
	UseStrConv    bool
	EnableBatch   bool
	ImportPackage string
}

var _headerTemplate = `
// Code generated by champ tool dtogen. DO NOT EDIT.
/* 
  Package {{.PkgName}} is a generated mc cache package.
  It is generated from:
  ARGS
*/

package {{.PkgName}}

import (
	{{if .UseStrConv}}"strconv"{{end}}
	{{if .EnableBatch }}"sync"{{end}}
	"{{.ImportPackage}}"
)

`

type addFile struct {
	FileHeader string
	Body       []string
}

var _addFile = `
{{.FileHeader}}

{{range $element := .Body}}
{{$element}}
{{end}}

`

type addDtoTemplate struct {
	StructName string
	Feilds     []string
}

var _addDtoTemplate = `
// {{.StructName}} created
type {{.StructName}} struct {
{{range $element := .Feilds}}
	{{$element}}
{{end}}
}
`

type addDtoToModelTemplate struct {
	StructName string
	Model      string
	ParentPk   string
	Fields     []string
}

var _addDtoToModelTemplate = `
// {{.StructName}} function To model
func (dto *{{.StructName}})toModel() *{{.ParentPk}}.{{.Model}} {
	model:=&{{.ParentPk}}.{{.Model}}{}
{{range $element := .Fields}}
	{{$element}}
{{end}}
	return model
}
`

type fieldAddTemplate struct {
	FiledName string
	Types     string
	Tags      string
}

var _fieldAddTemplate = "{{.FiledName}} {{.Types}} `{{.Tags}}`"

var _fieldAtdmTemplate = "model.{{.Field}} = dto.{{.Field}}"

func (builder *Builder) outAddDtoAndToModel() (string, error) {
	filemap := builder.fm
	pkg, err := utils.GetPkgName(path.Dir(builder.FileName))
	if err != nil {
		return "", nil
	}
	var bodys []string
	for _, modelDetail := range filemap.Models {
		var fields []string
		var toModels []string
		for _, v := range modelDetail.Fields {
			field, toModel, err := addFeildString(&v)
			if err != nil {
				continue
			}
			log.Debug("Feildname:", v.FieldName)
			fields = append(fields, field)
			toModels = append(toModels, toModel)
		}
		if fields != nil || len(fields) > 0 {
			admot := new(addDtoTemplate)
			admot.StructName = modelDetail.Name + POSTTOSUFFIX
			admot.Feilds = fields

			admotCode, err := utils.ParserName(_addDtoTemplate, admot)
			if err == nil {
				bodys = append(bodys, admotCode.String())
			}

		}
		if toModels != nil {
			adtmt := new(addDtoToModelTemplate)
			adtmt.StructName = modelDetail.Name + POSTTOSUFFIX
			adtmt.Model = modelDetail.Name
			adtmt.Fields = toModels
			pkgs := strings.Split(pkg, "/")
			adtmt.ParentPk = pkgs[len(pkgs)-1]
			adtmtCode, err := utils.ParserName(_addDtoToModelTemplate, adtmt)
			if err == nil {
				bodys = append(bodys, adtmtCode.String())
			}
		}
	}
	if bodys == nil {
		return "", NOBODY
	}

	fileHeader := new(headerTemplate)
	fileHeader.PkgName = BUILD_POST
	fileHeader.ImportPackage = pkg
	headerBuffer, err := utils.ParserName(_headerTemplate, fileHeader)
	if err != nil {
		return "", err
	}
	fileOut := new(addFile)
	fileOut.Body = bodys
	fileOut.FileHeader = headerBuffer.String()
	fileBuffer, err := utils.ParserName(_addFile, fileOut)
	if err != nil {
		return "", err
	}

	return fileBuffer.String(), nil
}
