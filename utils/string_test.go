package utils

import (
	. "github.com/smartystreets/goconvey/convey"
	"strings"
	"testing"
)

func TestCheckStringIsBlank(t *testing.T) {
	Convey("check", t, func() {
		csib := CheckStringIsBlank("")
		So(csib, ShouldBeTrue)
		csib = CheckStringIsBlank("     ")
		So(csib, ShouldBeTrue)
		csib = CheckStringIsBlank(" dsafdsa")
		So(csib, ShouldBeFalse)
	})
}

func TestParserName(t *testing.T) {
	type headerTemplate struct {
		PkgName       string
		UseStrConv    bool
		EnableBatch   bool
		ImportPackage string
	}

	var _headerTemplate = `
// Code generated by champ tool dtogen. DO NOT EDIT.
/* 
  Package {{.PkgName}} is a generated mc cache package.
  It is generated from:
  ARGS
*/

package {{.PkgName}}

import (
	{{if .UseStrConv}}"strconv"{{end}}
	{{if .EnableBatch }}"sync"{{end}}
	"{{.ImportPackage}}"
)

`
	Convey("parerName", t, func() {
		hk := headerTemplate{}
		hk.PkgName = "mokngd"
		hk.ImportPackage = "slid"
		hk.EnableBatch = true
		hk.UseStrConv = true
		s, err := ParserName(_headerTemplate, hk)

		So(err, ShouldBeNil)
		So(s.Len() != 0, ShouldBeTrue)
		snk := s.String()
		So(strings.Contains(snk, hk.PkgName), ShouldBeTrue)
		So(strings.Contains(snk, hk.ImportPackage), ShouldBeTrue)
	})

	Convey("parserName", t, func() {
		s, err := ParserName(_headerTemplate, struct {
		}{})
		So(err, ShouldNotBeNil)
		So(s, ShouldBeNil)
	})

}
